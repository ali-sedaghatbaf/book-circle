'use client'

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Bot, Loader2 } from 'lucide-react';
import { type Message } from '@/lib/data';
import { summarizeDiscussion } from '@/ai/flows/summarize-discussion';
import { useToast } from '@/hooks/use-toast';

export default function SummarizeThread({ messages }: { messages: Message[] }) {
  const [isOpen, setIsOpen] = useState(false);
  const [summary, setSummary] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSummarize = async () => {
    setIsLoading(true);
    setIsOpen(true);
    setSummary(''); // Clear previous summary
    const discussionText = messages.map(m => `${m.userId}: ${m.content}`).join('\n\n');
    
    try {
      const result = await summarizeDiscussion({ text: discussionText });
      if (result.summary) {
          setSummary(result.summary);
      } else {
        throw new Error("Received an empty summary from the AI.");
      }
    } catch (error) {
        console.error(error);
        toast({
            title: 'Error',
            description: 'Failed to generate summary.',
            variant: 'destructive',
        });
        setIsOpen(false);
    } finally {
        setIsLoading(false);
    }
  };

  return (
    <>
      <Button onClick={handleSummarize} disabled={isLoading}>
        {isLoading ? (
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <Bot className="mr-2 h-4 w-4" />
        )}
        Summarize
      </Button>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Bot className="h-6 w-6 text-primary" />
              AI Summary of the Discussion
            </DialogTitle>
            <DialogDescription>
              Here are the key points from this thread, generated by AI.
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            {isLoading ? (
              <div className="flex flex-col items-center justify-center space-y-4 h-40">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="text-muted-foreground">Generating summary...</p>
              </div>
            ) : (
              <div className="prose prose-sm max-w-none max-h-[50vh] overflow-y-auto rounded-md border bg-secondary/50 p-4">
                <p>{summary}</p>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
